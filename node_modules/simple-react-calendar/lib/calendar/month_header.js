"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _add_months = _interopRequireDefault(require("date-fns/add_months"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _is_after = _interopRequireDefault(require("date-fns/is_after"));

var _is_before = _interopRequireDefault(require("date-fns/is_before"));

var _start_of_month = _interopRequireDefault(require("date-fns/start_of_month"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _lib = require("./_lib");

var _header_button = _interopRequireDefault(require("./header_button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MonthHeader =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MonthHeader, _React$Component);

  function MonthHeader() {
    _classCallCheck(this, MonthHeader);

    return _possibleConstructorReturn(this, _getPrototypeOf(MonthHeader).apply(this, arguments));
  }

  _createClass(MonthHeader, [{
    key: "_switchMonth",
    value: function _switchMonth(offset) {
      var _this$props = this.props,
          onMonthChange = _this$props.onMonthChange,
          activeMonth = _this$props.activeMonth;
      onMonthChange((0, _add_months.default)(activeMonth, parseInt(offset)));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          activeMonth = _this$props2.activeMonth,
          minDate = _this$props2.minDate,
          maxDate = _this$props2.maxDate,
          blockClassName = _this$props2.blockClassName,
          headerNextArrow = _this$props2.headerNextArrow,
          headerNextTitle = _this$props2.headerNextTitle,
          headerPrevArrow = _this$props2.headerPrevArrow,
          headerPrevTitle = _this$props2.headerPrevTitle,
          customRender = _this$props2.customRender;
      var prevEnabled = minDate ? (0, _is_before.default)((0, _start_of_month.default)(minDate), (0, _start_of_month.default)(activeMonth)) : true;
      var nextEnabled = maxDate ? (0, _is_after.default)((0, _start_of_month.default)(maxDate), (0, _start_of_month.default)(activeMonth)) : true;

      if (customRender) {
        return customRender(_objectSpread({}, this.props, {
          prevEnabled: prevEnabled,
          nextEnabled: nextEnabled,
          switchMonth: this._switchMonth.bind(this),
          children: 'no content, please use activeMonth prop and custom buttons instead'
        }));
      }

      return _react.default.createElement("div", {
        className: "".concat(blockClassName, "-month_header")
      }, _react.default.createElement(_header_button.default, {
        type: "prev",
        arrow: headerPrevArrow,
        title: headerPrevTitle,
        enabled: prevEnabled,
        onClick: this._switchMonth.bind(this, -1),
        blockClassName: blockClassName
      }), _react.default.createElement("div", {
        className: "".concat(blockClassName, "-month_header_title")
      }, (0, _format.default)(activeMonth, 'MMMM YYYY')), _react.default.createElement(_header_button.default, {
        type: "next",
        arrow: headerNextArrow,
        title: headerNextTitle,
        enabled: nextEnabled,
        onClick: this._switchMonth.bind(this, 1),
        blockClassName: blockClassName
      }));
    }
  }]);

  return MonthHeader;
}(_react.default.Component);

exports.default = MonthHeader;

_defineProperty(MonthHeader, "propTypes", {
  activeMonth: _lib.datePropType.isRequired,
  blockClassName: _propTypes.default.string,
  customRender: _propTypes.default.func,
  headerNextArrow: _propTypes.default.element,
  headerNextTitle: _propTypes.default.string,
  headerPrevArrow: _propTypes.default.element,
  headerPrevTitle: _propTypes.default.string,
  maxDate: _lib.datePropType,
  minDate: _lib.datePropType,
  onMonthChange: _propTypes.default.func.isRequired
});