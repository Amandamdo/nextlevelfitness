"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _is_same_month = _interopRequireDefault(require("date-fns/is_same_month"));

var _is_valid = _interopRequireDefault(require("date-fns/is_valid"));

var _start_of_month = _interopRequireDefault(require("date-fns/start_of_month"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _lib = require("./_lib");

var _consts = require("./consts");

var _month = _interopRequireDefault(require("./month"));

var _month_header = _interopRequireDefault(require("./month_header"));

var _notice = _interopRequireDefault(require("./notice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SINGLE_MODE = 'single';
var RANGE_MODE = 'range';

var isValid = function isValid(date) {
  try {
    return (0, _is_valid.default)(date);
  } catch (e) {
    return false;
  }
};

var Calendar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Calendar, _React$Component);

  function Calendar(props) {
    var _this;

    _classCallCheck(this, Calendar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, props));
    _this.state = {
      activeMonth: _this._initialMonth(props),
      selection: null,
      shownNoticeType: null
    };
    return _this;
  }

  _createClass(Calendar, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.activeMonth && !(0, _is_same_month.default)(nextProps.activeMonth, this.props.activeMonth)) {
        this.setState({
          activeMonth: (0, _start_of_month.default)(nextProps.activeMonth)
        });
      }
    }
  }, {
    key: "_initialMonth",
    value: function _initialMonth(props) {
      var _ref = props || this.props,
          selected = _ref.selected,
          activeMonth = _ref.activeMonth,
          mode = _ref.mode,
          today = _ref.today;

      if (isValid(activeMonth)) {
        return activeMonth;
      } else {
        if (selected) {
          var selectionStart = mode === SINGLE_MODE ? selected : selected.start;

          if (isValid(selectionStart)) {
            return (0, _start_of_month.default)(selectionStart);
          }
        }
      }

      return (0, _start_of_month.default)(today || new Date());
    }
  }, {
    key: "_switchMonth",
    value: function _switchMonth(date) {
      var onMonthChange = this.props.onMonthChange;

      if (typeof onMonthChange === 'function') {
        onMonthChange(date);
      } else {
        this.setState({
          activeMonth: date
        });
      }
    }
  }, {
    key: "_activeMonth",
    value: function _activeMonth() {
      var _this$props = this.props,
          onMonthChange = _this$props.onMonthChange,
          activeMonth = _this$props.activeMonth;

      if (onMonthChange) {
        return activeMonth;
      } else {
        return this.state.activeMonth;
      }
    }
  }, {
    key: "_highlight",
    value: function _highlight() {
      var highlighted = this.props.highlighted;
      if (!highlighted) return {
        start: null,
        end: null
      };
      var start = highlighted.start,
          end = highlighted.end;

      if (isValid(start) && isValid(end)) {
        return {
          start: start,
          end: end
        };
      } else {
        return {
          start: null,
          end: null
        };
      }
    }
  }, {
    key: "_selection",
    value: function _selection() {
      var start = this._selectionStart();

      var end = this._selectionEnd();

      if (isValid(start) && isValid(end)) {
        return {
          start: start,
          end: end
        };
      } else {
        return {
          start: null,
          end: null
        };
      }
    }
  }, {
    key: "_selectionStart",
    value: function _selectionStart() {
      return this._selectionDate('start');
    }
  }, {
    key: "_selectionEnd",
    value: function _selectionEnd() {
      return this._selectionDate('end');
    }
  }, {
    key: "_selectionDate",
    value: function _selectionDate(dateType) {
      var _this$props2 = this.props,
          selected = _this$props2.selected,
          onSelectionProgress = _this$props2.onSelectionProgress;
      var selection = this.state.selection;

      switch (this.props.mode) {
        case SINGLE_MODE:
          return selected;

        case RANGE_MODE:
          if (!onSelectionProgress && selection) {
            return selection[dateType];
          } else {
            return selected && selected[dateType];
          }

      }
    }
  }, {
    key: "_selectionChanged",
    value: function _selectionChanged(selection) {
      var start = selection.start,
          end = selection.end,
          inProgress = selection.inProgress;
      var _this$props3 = this.props,
          mode = _this$props3.mode,
          onSelect = _this$props3.onSelect,
          onSelectionProgress = _this$props3.onSelectionProgress;

      if (onSelect && start && (mode !== RANGE_MODE || !inProgress)) {
        onSelect(mode === SINGLE_MODE ? start : {
          start: start,
          end: end
        });
      }

      if (mode === RANGE_MODE) {
        if (onSelectionProgress) {
          onSelectionProgress(selection);
        } else {
          this.setState({
            selection: inProgress ? {
              start: start,
              end: end
            } : null
          });
        }
      }
    }
  }, {
    key: "_noticeChanged",
    value: function _noticeChanged(shownNoticeType) {
      this.setState({
        shownNoticeType: shownNoticeType
      });
    }
  }, {
    key: "_today",
    value: function _today() {
      return this.props.today || new Date();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          blockClassName = _this$props4.blockClassName,
          customRender = _this$props4.customRender;

      var children = _react.default.createElement(_react.default.Fragment, null, this._renderNotice(), this._renderMonthHeader(), this._renderMonth());

      if (customRender) {
        return customRender(_objectSpread({}, this.props, {
          children: children
        }));
      }

      return _react.default.createElement("div", {
        className: blockClassName
      }, children);
    }
  }, {
    key: "_renderNotice",
    value: function _renderNotice() {
      var shownNoticeType = this.state.shownNoticeType;
      var blockClassName = this.props.blockClassName;
      var NoticeComponent = this.props.NoticeComponent || _notice.default;
      return shownNoticeType && _react.default.createElement(NoticeComponent, {
        blockClassName: blockClassName,
        type: shownNoticeType
      });
    }
  }, {
    key: "_renderMonth",
    value: function _renderMonth() {
      var _this$props5 = this.props,
          blockClassName = _this$props5.blockClassName,
          disableDaysOfWeek = _this$props5.disableDaysOfWeek,
          maxDate = _this$props5.maxDate,
          minDate = _this$props5.minDate,
          minNumberOfWeeks = _this$props5.minNumberOfWeeks,
          mode = _this$props5.mode,
          onDayHover = _this$props5.onDayHover,
          disabledIntervals = _this$props5.disabledIntervals,
          rangeLimit = _this$props5.rangeLimit,
          weekStartsOn = _this$props5.weekStartsOn,
          daysOfWeek = _this$props5.daysOfWeek,
          renderDay = _this$props5.renderDay,
          renderWeek = _this$props5.renderWeek,
          renderMonth = _this$props5.renderMonth,
          renderDaysOfWeek = _this$props5.renderDaysOfWeek,
          renderDayOfWeek = _this$props5.renderDayOfWeek;

      var selection = this._selection();

      var highlight = this._highlight();

      return _react.default.createElement(_month.default, {
        customRender: renderMonth,
        renderDay: renderDay,
        renderWeek: renderWeek,
        renderDaysOfWeek: renderDaysOfWeek,
        renderDayOfWeek: renderDayOfWeek,
        activeMonth: this._activeMonth(),
        blockClassName: blockClassName,
        daysOfWeek: daysOfWeek,
        disableDaysOfWeek: disableDaysOfWeek,
        disabledIntervals: disabledIntervals,
        highlightedEnd: highlight.end,
        highlightedStart: highlight.start,
        maxDate: maxDate,
        minDate: minDate,
        minNumberOfWeeks: minNumberOfWeeks,
        mode: mode,
        onChange: this._selectionChanged.bind(this),
        onDayMouseEnter: onDayHover,
        onNoticeChange: this._noticeChanged.bind(this),
        rangeLimit: rangeLimit,
        ref: "month",
        selectedMax: selection.end,
        selectedMin: selection.start,
        today: this._today(),
        weekStartsOn: weekStartsOn
      });
    }
  }, {
    key: "_renderMonthHeader",
    value: function _renderMonthHeader() {
      var _this$props6 = this.props,
          blockClassName = _this$props6.blockClassName,
          headerNextArrow = _this$props6.headerNextArrow,
          headerNextTitle = _this$props6.headerNextTitle,
          headerPrevArrow = _this$props6.headerPrevArrow,
          headerPrevTitle = _this$props6.headerPrevTitle,
          maxDate = _this$props6.maxDate,
          minDate = _this$props6.minDate,
          _this$props6$MonthHea = _this$props6.MonthHeaderComponent,
          MonthHeaderComponent = _this$props6$MonthHea === void 0 ? _month_header.default : _this$props6$MonthHea,
          renderMonthHeader = _this$props6.renderMonthHeader;
      return _react.default.createElement(MonthHeaderComponent, {
        customRender: renderMonthHeader,
        activeMonth: this._activeMonth(),
        blockClassName: blockClassName,
        headerNextArrow: headerNextArrow,
        headerNextTitle: headerNextTitle,
        headerPrevArrow: headerPrevArrow,
        headerPrevTitle: headerPrevTitle,
        maxDate: maxDate,
        minDate: minDate,
        onMonthChange: this._switchMonth.bind(this),
        ref: "header"
      });
    }
  }]);

  return Calendar;
}(_react.default.Component);

exports.default = Calendar;

_defineProperty(Calendar, "propTypes", {
  MonthHeaderComponent: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  NoticeComponent: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  activeMonth: _lib.datePropType,
  blockClassName: _propTypes.default.string,
  customRender: _propTypes.default.func,
  daysOfWeek: _propTypes.default.arrayOf(_propTypes.default.string),
  disableDaysOfWeek: _propTypes.default.bool,
  disabledIntervals: _propTypes.default.arrayOf(_propTypes.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  })),
  headerNextArrow: _propTypes.default.element,
  headerNextTitle: _propTypes.default.string,
  headerPrevArrow: _propTypes.default.element,
  headerPrevTitle: _propTypes.default.string,
  highlighted: _propTypes.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  }),
  maxDate: _lib.datePropType,
  minDate: _lib.datePropType,
  minNumberOfWeeks: _propTypes.default.number,
  mode: _propTypes.default.oneOf([SINGLE_MODE, RANGE_MODE]),
  onDayHover: _propTypes.default.func,
  onMonthChange: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  onSelectionProgress: _propTypes.default.func,
  rangeLimit: _propTypes.default.number,
  renderDay: _propTypes.default.func,
  renderDayOfWeek: _propTypes.default.func,
  renderDaysOfWeek: _propTypes.default.func,
  renderMonth: _propTypes.default.func,
  renderMonthHeader: _propTypes.default.func,
  renderWeek: _propTypes.default.func,
  selected: _propTypes.default.oneOfType([_lib.datePropType, _propTypes.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired,
    inProgress: _propTypes.default.bool
  })]),
  today: _lib.datePropType,
  weekStartsOn: _propTypes.default.oneOf(_consts.DAYS_IN_WEEK)
});

_defineProperty(Calendar, "defaultProps", {
  blockClassName: _consts.BLOCK_CLASS_NAME,
  daysOfWeek: _consts.DAYS_OF_WEEK,
  headerNextTitle: _consts.NEXT_MONTH_TITLE,
  headerPrevTitle: _consts.PREV_MONTH_TITLE,
  mode: SINGLE_MODE,
  weekStartsOn: 1
});